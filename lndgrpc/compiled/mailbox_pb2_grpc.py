# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lndgrpc.compiled import mailbox_pb2 as lndgrpc_dot_compiled_dot_mailbox__pb2


class MailboxStub(object):
    """
    Service definition for the authenticated mailbox. This service allows sending
    messages (authenticated by UTXO proof) and receiving messages (authenticated
    via a challenge-response handshake).
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
                '/authmailboxrpc.Mailbox/SendMessage',
                request_serializer=lndgrpc_dot_compiled_dot_mailbox__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mailbox__pb2.SendMessageResponse.FromString,
                )
        self.ReceiveMessages = channel.stream_stream(
                '/authmailboxrpc.Mailbox/ReceiveMessages',
                request_serializer=lndgrpc_dot_compiled_dot_mailbox__pb2.ReceiveMessagesRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mailbox__pb2.ReceiveMessagesResponse.FromString,
                )
        self.MailboxInfo = channel.unary_unary(
                '/authmailboxrpc.Mailbox/MailboxInfo',
                request_serializer=lndgrpc_dot_compiled_dot_mailbox__pb2.MailboxInfoRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mailbox__pb2.MailboxInfoResponse.FromString,
                )


class MailboxServicer(object):
    """
    Service definition for the authenticated mailbox. This service allows sending
    messages (authenticated by UTXO proof) and receiving messages (authenticated
    via a challenge-response handshake).
    """

    def SendMessage(self, request, context):
        """
        Sends a single message to a receiver's mailbox. Requires a valid, unused
        Bitcoin P2TR transaction outpoint as proof of uniqueness, included in a
        block as proof of work.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReceiveMessages(self, request_iterator, context):
        """
        Initiates a bidirectional stream to receive messages for a specific
        receiver. This stream implements the challenge-response handshake required
        for receiver authentication before messages are delivered.

        Expected flow:
        1. Client -> Server: ReceiveMessagesRequest(init = InitReceive{...})
        2. Server -> Client: ReceiveMessagesResponse(challenge = Challenge{...})
        3. Client -> Server: ReceiveMessagesRequest(auth_sig = AuthSignature{...})
        4. Server -> Client: [Stream of ReceiveMessagesResponse(
        message = MailboxMessage{...}
        )]
        5. Server -> Client: ReceiveMessagesResponse(eos = EndOfStream{})
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MailboxInfo(self, request, context):
        """
        Returns basic server information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MailboxServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=lndgrpc_dot_compiled_dot_mailbox__pb2.SendMessageRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mailbox__pb2.SendMessageResponse.SerializeToString,
            ),
            'ReceiveMessages': grpc.stream_stream_rpc_method_handler(
                    servicer.ReceiveMessages,
                    request_deserializer=lndgrpc_dot_compiled_dot_mailbox__pb2.ReceiveMessagesRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mailbox__pb2.ReceiveMessagesResponse.SerializeToString,
            ),
            'MailboxInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.MailboxInfo,
                    request_deserializer=lndgrpc_dot_compiled_dot_mailbox__pb2.MailboxInfoRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mailbox__pb2.MailboxInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'authmailboxrpc.Mailbox', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mailbox(object):
    """
    Service definition for the authenticated mailbox. This service allows sending
    messages (authenticated by UTXO proof) and receiving messages (authenticated
    via a challenge-response handshake).
    """

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authmailboxrpc.Mailbox/SendMessage',
            lndgrpc_dot_compiled_dot_mailbox__pb2.SendMessageRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mailbox__pb2.SendMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReceiveMessages(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/authmailboxrpc.Mailbox/ReceiveMessages',
            lndgrpc_dot_compiled_dot_mailbox__pb2.ReceiveMessagesRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mailbox__pb2.ReceiveMessagesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MailboxInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/authmailboxrpc.Mailbox/MailboxInfo',
            lndgrpc_dot_compiled_dot_mailbox__pb2.MailboxInfoRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mailbox__pb2.MailboxInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
