# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lndgrpc.compiled import mint_pb2 as lndgrpc_dot_compiled_dot_mint__pb2


class MintStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MintAsset = channel.unary_unary(
                '/mintrpc.Mint/MintAsset',
                request_serializer=lndgrpc_dot_compiled_dot_mint__pb2.MintAssetRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.MintAssetResponse.FromString,
                )
        self.FundBatch = channel.unary_unary(
                '/mintrpc.Mint/FundBatch',
                request_serializer=lndgrpc_dot_compiled_dot_mint__pb2.FundBatchRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.FundBatchResponse.FromString,
                )
        self.SealBatch = channel.unary_unary(
                '/mintrpc.Mint/SealBatch',
                request_serializer=lndgrpc_dot_compiled_dot_mint__pb2.SealBatchRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.SealBatchResponse.FromString,
                )
        self.FinalizeBatch = channel.unary_unary(
                '/mintrpc.Mint/FinalizeBatch',
                request_serializer=lndgrpc_dot_compiled_dot_mint__pb2.FinalizeBatchRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.FinalizeBatchResponse.FromString,
                )
        self.CancelBatch = channel.unary_unary(
                '/mintrpc.Mint/CancelBatch',
                request_serializer=lndgrpc_dot_compiled_dot_mint__pb2.CancelBatchRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.CancelBatchResponse.FromString,
                )
        self.ListBatches = channel.unary_unary(
                '/mintrpc.Mint/ListBatches',
                request_serializer=lndgrpc_dot_compiled_dot_mint__pb2.ListBatchRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.ListBatchResponse.FromString,
                )
        self.SubscribeMintEvents = channel.unary_stream(
                '/mintrpc.Mint/SubscribeMintEvents',
                request_serializer=lndgrpc_dot_compiled_dot_mint__pb2.SubscribeMintEventsRequest.SerializeToString,
                response_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.MintEvent.FromString,
                )


class MintServicer(object):
    """Missing associated documentation comment in .proto file."""

    def MintAsset(self, request, context):
        """tapcli: `assets mint`
        MintAsset will attempt to mint the set of assets (async by default to
        ensure proper batching) specified in the request. The pending batch is
        returned that shows the other pending assets that are part of the next
        batch. This call will block until the operation succeeds (asset is staged
        in the batch) or fails.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FundBatch(self, request, context):
        """tapcli `assets mint fund`
        FundBatch will attempt to fund the current pending batch with a genesis
        input, or create a new funded batch if no batch exists yet. This RPC is only
        needed if a custom witness is needed to finalize the batch. Otherwise,
        FinalizeBatch can be called directly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SealBatch(self, request, context):
        """tapcli `assets mint seal`
        SealBatch will attempt to seal the current pending batch by creating and
        validating asset group witness for all assets in the batch. If a witness
        is not provided, a signature will be derived to serve as the witness. This
        RPC is only needed if any assets in the batch have a custom asset group key
        that require an external signer. Otherwise, FinalizeBatch can be called
        directly.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinalizeBatch(self, request, context):
        """tapcli: `assets mint finalize`
        FinalizeBatch will attempt to finalize the current pending batch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelBatch(self, request, context):
        """tapcli: `assets mint cancel`
        CancelBatch will attempt to cancel the current pending batch.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatches(self, request, context):
        """tapcli: `assets mint batches`
        ListBatches lists the set of batches submitted to the daemon, including
        pending and cancelled batches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeMintEvents(self, request, context):
        """tapcli: `events mint`
        SubscribeMintEvents allows a caller to subscribe to mint events for asset
        creation batches.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MintServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MintAsset': grpc.unary_unary_rpc_method_handler(
                    servicer.MintAsset,
                    request_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.MintAssetRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mint__pb2.MintAssetResponse.SerializeToString,
            ),
            'FundBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.FundBatch,
                    request_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.FundBatchRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mint__pb2.FundBatchResponse.SerializeToString,
            ),
            'SealBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.SealBatch,
                    request_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.SealBatchRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mint__pb2.SealBatchResponse.SerializeToString,
            ),
            'FinalizeBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.FinalizeBatch,
                    request_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.FinalizeBatchRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mint__pb2.FinalizeBatchResponse.SerializeToString,
            ),
            'CancelBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelBatch,
                    request_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.CancelBatchRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mint__pb2.CancelBatchResponse.SerializeToString,
            ),
            'ListBatches': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBatches,
                    request_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.ListBatchRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mint__pb2.ListBatchResponse.SerializeToString,
            ),
            'SubscribeMintEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeMintEvents,
                    request_deserializer=lndgrpc_dot_compiled_dot_mint__pb2.SubscribeMintEventsRequest.FromString,
                    response_serializer=lndgrpc_dot_compiled_dot_mint__pb2.MintEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mintrpc.Mint', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Mint(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def MintAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mintrpc.Mint/MintAsset',
            lndgrpc_dot_compiled_dot_mint__pb2.MintAssetRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mint__pb2.MintAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FundBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mintrpc.Mint/FundBatch',
            lndgrpc_dot_compiled_dot_mint__pb2.FundBatchRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mint__pb2.FundBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SealBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mintrpc.Mint/SealBatch',
            lndgrpc_dot_compiled_dot_mint__pb2.SealBatchRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mint__pb2.SealBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinalizeBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mintrpc.Mint/FinalizeBatch',
            lndgrpc_dot_compiled_dot_mint__pb2.FinalizeBatchRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mint__pb2.FinalizeBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mintrpc.Mint/CancelBatch',
            lndgrpc_dot_compiled_dot_mint__pb2.CancelBatchRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mint__pb2.CancelBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatches(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mintrpc.Mint/ListBatches',
            lndgrpc_dot_compiled_dot_mint__pb2.ListBatchRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mint__pb2.ListBatchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeMintEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/mintrpc.Mint/SubscribeMintEvents',
            lndgrpc_dot_compiled_dot_mint__pb2.SubscribeMintEventsRequest.SerializeToString,
            lndgrpc_dot_compiled_dot_mint__pb2.MintEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
